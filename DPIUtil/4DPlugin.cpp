/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : DPIUtil
 #	author : miyako
 #	2016/02/04
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

namespace dpi
{
#if VERSIONWIN
	typedef struct
	{
		int currentScreenId;
		int requestedScreenId;
		int horzsize;
		int vertsize;
		int horzres;
		int vertres;
		int logpixelsx;
		int logpixelsy;
	}EnumDisplayMonitorsContext;

	BOOL CALLBACK MonitorEnumProc(HMONITOR hMonitor, HDC hdcMonitor, LPRECT lprcMonitor, LPARAM dwData)
	{
		EnumDisplayMonitorsContext *ctx = (EnumDisplayMonitorsContext *)dwData;
		ctx->currentScreenId++;
		if(ctx->currentScreenId == ctx->requestedScreenId)
		{
			ctx->horzsize = GetDeviceCaps (hdcMonitor, HORZSIZE);
			ctx->vertsize = GetDeviceCaps (hdcMonitor, VERTSIZE);
			ctx->horzres = GetDeviceCaps (hdcMonitor, HORZRES);
			ctx->vertres = GetDeviceCaps (hdcMonitor, VERTRES);
			ctx->logpixelsx = GetDeviceCaps (hdcMonitor, LOGPIXELSX);
			ctx->logpixelsy = GetDeviceCaps (hdcMonitor, LOGPIXELSY);
			
			return FALSE;//To stop the enumeration, return FALSE
		}else{
			return TRUE;//To continue the enumeration, return TRUE
		}
  }

	void setValue(HKEY hkey, LPCWSTR path, LPCWSTR key, DWORD value)
	{
		HKEY hk = NULL;

		if (ERROR_SUCCESS == RegCreateKeyEx(hkey, (LPCWSTR)path, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hk, NULL))
		{
			RegSetValueEx(hk, (LPCWSTR)key, 0, REG_DWORD, (const BYTE *)&value, sizeof(DWORD));
			RegCloseKey(hk);
		}
	}

	DWORD getValue(HKEY hkey, LPCWSTR path, LPCWSTR key)
	{
		HKEY hk = NULL;
		DWORD value = 0;
		DWORD type = REG_DWORD;
		DWORD size = sizeof(DWORD);
		
		if (ERROR_SUCCESS == RegOpenKeyEx(hkey, (LPCWSTR)path, 0, KEY_READ, &hk))
		{
			RegQueryValueEx(hk, (LPCWSTR)key, 0, &type, (LPBYTE)&value, &size);
			RegCloseKey(hk);
		}
		return value;
	}
#endif
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- DPIUtil

		case 1 :
			DPI_GET_INFORMATION(pResult, pParams);
			break;

		case 2 :
			DPI_Get_option(pResult, pParams);
			break;

		case 3 :
			DPI_SET_OPTION(pResult, pParams);
			break;

	}
}

// ------------------------------------ DPIUtil -----------------------------------

void DPI_GET_INFORMATION(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_LONGINT Param2;
	C_LONGINT Param3;

	Param3.fromParamAtIndex(pParams, 3);
	unsigned short index = Param3.getIntValue();
	index = index ? index : 1;

	Param1.setSize(1);
	Param2.setSize(1);

#if VERSIONWIN

	dpi::EnumDisplayMonitorsContext ctx;
	ctx.currentScreenId = 0;
	ctx.requestedScreenId = index;
	ctx.horzsize = 0;
	ctx.vertsize = 0;
	ctx.horzres = 0;
	ctx.vertres = 0;
	ctx.logpixelsx = 0;
	ctx.logpixelsy = 0;
	
	HDC hDesktop = GetDC(NULL);

	if(hDesktop)
	{
		EnumDisplayMonitors(hDesktop, NULL, dpi::MonitorEnumProc, (LPARAM)&ctx);
		ReleaseDC(NULL, hDesktop);
	}

	Param1.appendUTF8String((const uint8_t *)"horzsize", strlen("horzsize"));
	Param1.appendUTF8String((const uint8_t *)"vertsize", strlen("vertsize"));
	Param1.appendUTF8String((const uint8_t *)"horzres", strlen("horzres"));
	Param1.appendUTF8String((const uint8_t *)"vertres", strlen("vertres"));
	Param1.appendUTF8String((const uint8_t *)"logpixelsx", strlen("logpixelsx"));
	Param1.appendUTF8String((const uint8_t *)"logpixelsy", strlen("logpixelsy"));

	Param2.appendIntValue(ctx.horzsize);
	Param2.appendIntValue(ctx.vertsize);
	Param2.appendIntValue(ctx.horzres);
	Param2.appendIntValue(ctx.vertres);
	Param2.appendIntValue(ctx.logpixelsx);
	Param2.appendIntValue(ctx.logpixelsy);
	
#endif

	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
}

void DPI_Get_option(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

#if VERSIONWIN

	HKEY hkey = HKEY_CURRENT_USER;

	switch(Param1.getIntValue())
	{
		case DPI_WIN8DPISCALING_KEY:
			returnValue.setIntValue(dpi::getValue(hkey, L"Control Panel\\Desktop", L"Win8DpiScaling"));
			break;
		case DPI_LOGPIXELS_KEY:
			returnValue.setIntValue(dpi::getValue(hkey, L"Control Panel\\Desktop", L"LogPixels"));
			break;
		case DPI_DESKTOPDPIOVERRIDE_KEY:
			returnValue.setIntValue(dpi::getValue(hkey, L"Control Panel\\Desktop", L"DesktopDPIOverride"));
			break;
	}
#endif

	returnValue.setReturn(pResult);
}

void DPI_SET_OPTION(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

#if VERSIONWIN

	HKEY hkey = HKEY_CURRENT_USER;

	switch(Param1.getIntValue())
	{
		case DPI_WIN8DPISCALING_KEY:
			dpi::setValue(hkey, L"Control Panel\\Desktop", L"Win8DpiScaling", Param2.getIntValue());
			break;
		case DPI_LOGPIXELS_KEY:
			dpi::setValue(hkey, L"Control Panel\\Desktop", L"LogPixels", Param2.getIntValue());
			break;
		case DPI_DESKTOPDPIOVERRIDE_KEY:
			dpi::setValue(hkey, L"Control Panel\\Desktop", L"DesktopDPIOverride", Param2.getIntValue());
			break;
	}
#endif
}

